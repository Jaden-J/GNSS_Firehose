	constant uart_rx_data, 20
	constant uart_rx_ready, 21
	constant uart_rx_read, 21

	constant uart_tx_data, 20
	constant uart_tx_ready, 22
	constant uart_tx_write, 22

	constant port_out_clock, 00
	constant port_in_phy_smi, 02
	constant port_out_phy_smi, 04
	constant port_out_pwm, 06
	constant port_i2c, 11
	constant port_hist, 14
	constant port_streamer_enable, 15
	constant port_dcm_rst, 1e
	constant port_jiffies, 2c

	constant max2112_i2c_slave_addr, 60

	constant scratch_pwm, 00
	constant scratch_jiffies, 08
	constant scratch_uart_phy, 09
	constant scratch_link_up, 0a
	constant scratch_auto_agc, 0b

main:   call hw_init
loop:   call uart_service     ; service any UART commands
	call poll             ; low-rate polling of various background services
	jump loop

poll:	input s3, port_jiffies  ; has jiffies counter changed?
	fetch s4, scratch_jiffies
	compare s3, s4
	jump z, p_ret
	store s3, scratch_jiffies
	call agc_service      ; service the AGC loops
	call phy_service      ; poll Ethernet PHY for link status
p_ret:	return

hw_init:
	call clock_init       ; initialize clock synthesizer chip
	load s0,01            ; reset DCM now that source clock is stable
	output s0,port_dcm_rst
	call delay_10ms
	load s0,00
	output s0,port_dcm_rst
	call delay_10ms
	load s0,1             ; ADC channel 1
	call adc_init
	load s0,2             ; ADC channel 2
	call adc_init
	load s0,3             ; ADC channel 3
	call adc_init
	load s0,4             ; ADC channel 4
	call adc_init
;	call phy_setup	; VSC8601-specific setup
	load s0, 1            ; RF channel 1
	load s1, 2e           ; N=46 (L1)
	call max2112_init
	load s0, 2            ; RF channel 2
	load s1, 24           ; N=36 (L2)
	call max2112_init
	load s0, 3            ; RF channel 3
	load s1, 22           ; N=34 (L5)
	call max2112_init
	load s7, f0           ; initial AGC value: 240
	load s8, 00
	load s3, 1
	call set_agc
	load s3, 2
	call set_agc
	load s3, 3
	call set_agc
	load s0, 00
	store s0, scratch_uart_phy   ; control of PHY SMI bus is initially local
	load s0, 01
	store s0, scratch_auto_agc   ; enable automatic AGC by default
	return

uart_service:
	input s0, uart_rx_ready
	compare s0, 00
	return z
	call getchar
	compare s0, 6d   ; 'm'
	jump nz, skip1
	call port_addr
	return
skip1:  compare s0, 77   ; 'w'
	jump nz, skip2
	call port_write
	return
skip2:  compare s0, 72   ; 'r'
	jump nz, skip3
	call port_read
	return
skip3:	compare s0, 78   ; 'x'
	jump nz, skip4
	call port_echo
	return
skip4:	compare s0, 73   ; 's'
	jump nz, skip5
	call scratchpad_fetch
	return
skip5:	compare s0, 70   ; 'p'
	jump nz, skip6
	call phy_read
	return
skip6:  and s0, 0f
	sl0 s1
	sl0 s1
	sl0 s1
	sl0 s1
	or s1, s0
	return

port_addr:
	load s2, s1
	return

port_write:
	output s1, (s2)
	return

port_read:
	input s0, (s2)
	call putchar
        return

port_echo:
	load s0, s2
	call putchar
	return

scratchpad_fetch:
	fetch s0, (s2)
	call putchar
	return

getchar:
	input sF, uart_rx_ready
	compare sF, 00
	jump z, getchar
	input s0, uart_rx_data
	load sF, 01
	output sF, uart_rx_read
	load sF, 00
	output sF, uart_rx_read
	return

putchar:
	input sF, uart_tx_ready
	compare sF, 00
	jump z, putchar
	output s0, uart_tx_data
	load sF, 01
	output sF, uart_tx_write
	load sF, 00
	output sF, uart_tx_write
	return

agc_service:
	fetch s3, scratch_auto_agc      ; auto AGC enabled?
	compare s3, 00
	return z
	load s3, 1                      ; iterate over channels 1,2,3
agc1:	call get_agc
	call hist_measure
	compare s6, 0
	jump nz, agc2
	compare s7, 00                  ; decrease PWM value by 1 if greater than zero
	jump nz, agc4
	compare s8, 00
	jump nz, agc4
	jump agc5
agc4:	sub s7, 1
	subcy s8, 0
	jump agc3
agc2:   compare s7, ff                  ; increase PWM value by 1 if less than 0x3ff
	jump nz, agc6
	compare s8, 03
	jump nz, agc6
	jump agc5
agc6:	add s7, 1
	addcy s8, 0
agc3:	call set_agc
agc5:	add s3, 1
	compare s3, 4
	jump nz, agc1
	return

phy_service:
	fetch s3, scratch_uart_phy      ; does UART own access to SMI bus?
	compare s3, 00
	return nz
	load s3, 01                     ; SMI register 1 ('basic status')
	call phy_smi_read
	and s5, 04                      ; link status bit
	sr0 s5
	sr0 s5
	store s5, scratch_link_up
	output s5, port_streamer_enable
	return

clock_init: 
	load s0, 80
	load s1, 02
	load s2, 04
	load s3, 60
	call clock_write		; 80020460
	load s0, 00
	load s1, 00
	call clock_write		; 00000460
	call clock_write		; 00000460
	load s3, 61
	call clock_write		; 00000461
	call clock_write		; 00000461
	load s0, 80
	load s3, 62
	call clock_write		; 80000462
	call clock_write		; 80000462
	load s0, 00
	load s1, 00
	load s2, 04
	load s3, 63
	call clock_write		; 00000463
	call clock_write		; 00000463
	load s3, 64
	call clock_write		; 00000464
	call clock_write		; 00000464
	load s3, 65
	call clock_write		; 00000465
	call clock_write		; 00000465
	load s0, 06
	load s1, 66
	load s2, 00
	load s3, 06
	call clock_write		; 06660006
	load s0, 01
	load s1, 00
	load s2, 00
	load s3, 07
	call clock_write		; 01000007
	load s0, 11
	load s1, 11
	load s2, 00
	load s3, 08
	call clock_write		; 11110008
	load s0, 55
	load s1, 55
	load s2, 55
	load s3, 49
	call clock_write		; 55555549
	load s0, 10
	load s1, 00
	load s2, 40
	load s3, 0a
	call clock_write		; 1000400a
	load s0, 34
	load s1, 00
	load s2, 00
	load s3, 0b
	call clock_write		; 3400000b
	load s0, 13
	load s1, 0c
	load s2, 00
	load s3, 6c
	call clock_write		; 130c006c
	load s0, 3b
	load s1, 02
	load s2, 06
	load s3, 6d
	call clock_write		; 3b02066d
	load s0, 02
	load s1, 00
	load s2, 00
	load s3, 0e
	call clock_write		; 0200000e
	load s0, c1
	load s1, 55
	load s2, 04
	load s3, 10
	call clock_write		; c1550410
	load s0, 00
	load s1, 00
	load s2, 00
	load s3, 18
	call clock_write		; 00000018
	load s0, 83
	load s1, a8
	load s2, 00
	load s3, 1a
	call clock_write		; 83a8001a
	load s0, 00
	load s1, 10
	load s2, 00
	load s3, 1c
	call clock_write		; 0010001c
	load s0, 00
	load s1, 80
	load s2, 03
	load s3, fd
	call clock_write		; 008003fd  vco_div=62
	load s0, 02
	load s1, 00
	load s2, 03
	load s3, fe
	call clock_write		; 020003fe  vco_div=62
	call delay_100ms
	load s0, 34
	load s1, 01
	load s2, 00
	load s3, 0b
	call clock_write		; 3401000b
	call delay_100ms
	load s1, 00
	call clock_write		; 3400000b
	call delay_100ms
	return

clock_write:
	load s4, s0
	load s5, 0
cw0:	sla s4
	call clock_write_bit
	add s5, 1
	compare s5, 8
	jump nz, cw0
	load s4, s1
	load s5, 0
cw1:	sla s4
	call clock_write_bit
	add s5, 1
	compare s5, 8
	jump nz, cw1
	load s4, s2
	load s5, 0
cw2:	sla s4
	call clock_write_bit
	add s5, 1
	compare s5, 8
	jump nz, cw2
	load s4, s3
	load s5, 0
cw3:	sla s4
	call clock_write_bit
	add s5, 1
	compare s5, 8
	jump nz, cw3
	call clock_le
	return

clock_write_bit:
	jump c, bit_h
	load s8, 00
	load s9, 04
	jump bit_w
bit_h:	load s8, 02
	load s9, 06
bit_w:	output s8, port_out_clock
	call delay_5us
	output s9, port_out_clock
	call delay_5us
	output s8, port_out_clock
	call delay_5us
	return

clock_le:
	load s8, 00
	load s9, 01
	output s8, port_out_clock
	call delay_5us
	output s9, port_out_clock
	call delay_5us
	output s8, port_out_clock
	call delay_5us
	return

adc_init:
	load s1, 1
	call adc_cs
	load s2, 0
	load s3, 03
	call adc_write
	load s2, 1
	load s3, 1a         ; 000 BIT_ORDER_B=1 BIT_ORDER_A=1 MUX_CH=0 MUX=1 0
	call adc_write
	load s2, 3
	load s3, 07
	call adc_write
	load s2, 4
	load s3, 1b         ; 00 CT_DCLK_A=011 CT_DATA_A=011
	call adc_write
	load s2, 5
	load s3, 1b         ; 00 CT_DCLK_B=011 CT_DATA_B=011
	call adc_write
	load s2, 6
	load s3, 28         ; TEST_PATTERN=0 TEST_DATA=0 FORMAT=10(Gray) TERM_100=1 SYNC_MODE=0 DIV=00
	call adc_write
	load s2, 8
	load s3, 88
	call adc_write
	return

adc_cs:
	load s8, 0b
	add s8, s0
	compare s1, 00
	jump nz, cs_hi
	load s9, 01
	jump cs_w
cs_hi:	load s9, 09
cs_w:	output s9, (s8)
	call delay_5us
	return

adc_write:
	load s1, 0
	call adc_cs
	load s1, 0
	sla s1
	call adc_write_bit
	load sA, 0
	load sB, s2
	sla sB
aw1:	sla sB
	call adc_write_bit
	add sA, 1
	compare sA, 7
	jump nz, aw1
	load sA, 0
	load sB, s3
aw2:	sla sB
	call adc_write_bit
	add sA, 1
	compare sA, 8
	jump nz, aw2
	load s1, 1
	call adc_cs
	return

adc_write_bit:
	jump c, abit_h
	load s8, 01
	load s9, 05
	jump abit_w
abit_h:	load s8, 03
	load s9, 07
abit_w:	load sC, 0b
	add sC, s0
	output s8, (sC)
	call delay_5us
	output s9, (sC)
	call delay_5us
	output s8, (sC)
	call delay_5us
	return

phy_read:
	load s3, s2
	call phy_smi_read
	load s0, s4             ; MSB of result
	call putchar
	load s0, s5             ; LSB
	call putchar
	return

phy_smi_read:
	call phy_smi_write_0
	call phy_smi_write_1
	call phy_smi_write_1
	call phy_smi_write_0
	call phy_smi_write_0
	call phy_smi_write_0
	call phy_smi_write_0
	call phy_smi_write_0
	call phy_smi_write_0
	load s6, s3
	sla s6
	sla s6
	sla s6
	load s7, 0
pr1:	sla s6
	call phy_smi_write_bit
	add s7, 1
	compare s7, 5
	jump nz, pr1
	call phy_smi_read_bit
	call phy_smi_read_bit
	load s7, 0
pr2:	call phy_smi_read_bit
	jump c, sh1
	sl0 s5
	sla s4
	jump pi
sh1:	sl1 s5
	sla s4
pi:	add s7, 1
	compare s7, 10
	jump nz, pr2
	return

phy_setup:
	load s0, 1c		; address 28
	load s1, f0		; value 0xf000
	load s2, 00
	call phy_smi_write_extended
	return

phy_smi_write_extended:
	load s3, 1f
	load s4, 00
	load s5, 01
	call phy_smi_write
	load s3, s0
	load s4, s1
	load s5, s2
	call phy_smi_write
	load s3, 1f
	load s4, 00
	load s5, 00
	call phy_smi_write
	return

phy_smi_write:
	call phy_smi_write_0
	call phy_smi_write_1
	call phy_smi_write_0
	call phy_smi_write_1
	call phy_smi_write_0
	call phy_smi_write_0
	call phy_smi_write_0
	call phy_smi_write_0
	call phy_smi_write_0
	load s6, s3
	sla s6
	sla s6
	sla s6
	load s7, 0
p1:	sla s6
	call phy_smi_write_bit
	add s7, 1
	compare s7, 5
	jump nz, p1
	call phy_smi_write_1
	call phy_smi_write_0
	load s6, s4
	load s7, 0
p2:	sla s6
	call phy_smi_write_bit
	add s7, 1
	compare s7, 8
	jump nz, p2
	load s6, s5
	load s7, 0
p3:	sla s6
	call phy_smi_write_bit
	add s7, 1
	compare s7, 8
	jump nz, p3
	return

phy_smi_write_0:
	load s6, 0
	sla s6
	call phy_smi_write_bit
	return

phy_smi_write_1:
	load s6, 80
	sla s6
	call phy_smi_write_bit
	return

phy_smi_write_bit:
	jump c, pw_hi
	load s8, 01
	load s9, 05
	jump pw_w
pw_hi:	load s8, 03
	load s9, 07
pw_w:	output s8, port_out_phy_smi
	call delay_5us
	output s9, port_out_phy_smi
	call delay_5us
	output s8, port_out_phy_smi
	call delay_5us
	return

phy_smi_read_bit:
	input s6, port_in_phy_smi
	load s8, 00
	load s9, 04
	output s8, port_out_phy_smi
	call delay_5us
	output s9, port_out_phy_smi
	call delay_5us
	output s8, port_out_phy_smi
	call delay_5us
	and s6, 02
	jump z, prb0
	load s6, 80
	sla s6
	return
prb0:	load s6, 00
	sla s6
	return

max2112_init:
	call i2c_init
	load s2, 05
	load s3, 02            ; XD=000 R=00010 (divide by 2)
	call i2c_write
	load s2, 06
	load s3, 40
	call i2c_write
	load s2, 07
	load s3, cc
	call i2c_write
	load s2, 08
	load s3, 5c            ; LPF=0x5c (3 dB point ~27 MHz)
	call i2c_write
	load s2, 09
	load s3, 07
	call i2c_write
	load s2, 0a
	load s3, 00
	call i2c_write
	load s2, 0b
	load s3, 08
	call i2c_write
	load s2, 01
	load s3, s1
	call i2c_write
	load s2, 02
	load s3, 10
	call i2c_write
	load s2, 03
	load s3, 00
	call i2c_write
	load s2, 04
	load s3, 00
	call i2c_write
	load s2, 00
	load s3, 00
	call i2c_write
	return

i2c_init:
	load s4, 1
	call i2c_set_sda
	load s4, 1
	call i2c_set_scl
	return

; write a byte to a MAX2112 register
;
; s0: RF channel number
; s2: MAX2112 register address
; s3: data byte

i2c_write:
	call i2c_start
	load s5, max2112_i2c_slave_addr
	sl0 s5
	load s6, 7
	call i2c_bits
	load s9, 0
	call i2c_bit
	call i2c_ack
	load s5, s2
	load s6, 8
	call i2c_bits
	call i2c_ack
	load s5, s3
	load s6, 8
	call i2c_bits
	call i2c_ack
	call i2c_stop
	return

; Set the I2C signals
;
; s0: RF channel number
; s4: bit value

i2c_set_sda:
	load sF, s0
	sub sF, 1
	add sF, port_i2c
	input sE, (sF)
	load sD, s4
	sl0 sD
	and sE, fd
	or sE, sD
	output sE, (sF)
	call delay_5us
	return

i2c_set_scl:
	load sF, s0
	sub sF, 1
	add sF, port_i2c
	input sE, (sF)
	and sE, fe
	or sE, s4
	output sE, (sF)
	call delay_5us
	return

; write a bit to I2C
;
; s0: RF channel number
; s9: bit value

i2c_bit:
	load s4, s9
	call i2c_set_sda
	load s4, 1
	call i2c_set_scl
	load s4, 0
	call i2c_set_scl
	return

; write a sequence of bits to I2C
;
; s0: RF channel number
; s5: data
; s6: bit count

i2c_bits:
	load sA, 0
ibloop:	sla s5
	jump c, i_hi
	load s9, 0
	jump i_wb
i_hi:	load s9, 1
i_wb:	call i2c_bit
	add sA, 1
	compare sA, s6
	jump nz, ibloop
	return

i2c_ack:
	call i2c_get_bit
	return

i2c_start:
	load s4, 0
	call i2c_set_sda
	load s4, 0
	call i2c_set_scl
	return

i2c_stop:
	load s4, 1
	call i2c_set_scl
	load s4, 1
	call i2c_set_sda
	return

i2c_get_bit:
	load s4, 1
	call i2c_set_sda
	load s4, 1
	call i2c_set_scl
;read bit from sda
	load s4, 0
	call i2c_set_scl
	return

hist_measure:
	load sF, s3
	sub sF, 1
	sl0 sF
	add sF, port_hist
	input s4, (sF)
	add sF, 1
	input s5, (sF)
	sub s4, s5
	jump c, h1
	sub s4, s5
	jump c, h1
	load s6, 0               ; signal too weak
	return
h1:	load s6, 1               ; signal too strong
	return

get_agc:
	load sF, s3
	sub sF, 1
	sl0 sF
	add sF, scratch_pwm
	fetch s7, (sF)
	add sF, 1
	fetch s8, (sF)
	return

set_agc:
	load sF, s3
	sub sF, 1
	sl0 sF
	add sF, port_out_pwm
	output s7, (sF)		; LS byte
	add sF, 1
	output s8, (sF)		; MS byte
	load sF, s3
	sub sF, 1
	sl0 sF
	add sF, scratch_pwm
	store s7, (sF)
	add sF, 1
	store s8, (sF)
	return

delay_5us:
	load sF, 0
dl0:	add sF, 01
	compare sF, 1a   ; 26 iterations
	jump nz, dl0
	return

delay_40us:
	load sF, 0
dl1:	add sF, 01
	compare sF, d0   ; 208 iterations
	jump nz, dl1
	return

delay_10ms:
	load sE, 0
dl2:	call delay_40us
	add sE, 01
	compare sE, fa   ; 250 iterations
	jump nz, dl2
	return

delay_100ms:
	load sD, 0
dl3:	call delay_10ms
	add sD, 01
	compare sD, 0a   ; 10 iterations
	jump nz, dl3
	return
